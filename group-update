#!/bin/bash

# Place this script next to the directories containing the distro files.
# Kernels are in the directory "zz_kernels"

# exit if not root
[[ $EUID -ne 0 ]] && echo "You must be root to run this script." && exit
# define the non-root user
username="$(logname)"
# Go into each project and update packages
# list of directories holding linux projects (change names for YOUR projects)
#dirs='linux-project-1'
#dirs='linux-project-1 linux-project-2 linux-project-3 linux-project-4 linux-project-5'
#dirs='linux-project-1 linux-project-2'
dirs='linux-project-1 linux-project-5'
# apt packages to install and remove
new_apt_pkg=''
rmv_apt_pkg=''
# Python packages to install and remove
new_python_pkg=''
rmv_python_pkg=''
# Kernels
kernel_path="/media/${username}/MEDIA_2/distros/zz_kernels"
older_kernel=''
rmv_kernel='6.1.28-rt10-x64v3-xanmod1'
new_kernel='6.1.38-rt12-x64v4-xanmod1'
header_deb="${kernel_path}/linux-headers-${new_kernel}.deb"
image_deb="${kernel_path}/linux-image-${new_kernel}.deb"
libc_deb="${kernel_path}/linux-libc-dev_${new_kernel}.deb"
# DNS
CHROOTDNS='9.9.9.9' # DNS to use during chroot operation
# Partition holding distro files
partition='MEDIA_2'
discrete_commands(){
    printf "\nHello World\n"
    # cp /media/user/MEDIA_2/distros/zz_kernels/scripts/sdrpp_ubuntu_focal_amd64.deb edit/root
    # chroot edit bash -c "cd /root; dpkg -i sdrpp_ubuntu_focal_amd64.deb; rm sdrpp_ubuntu_focal_amd64.deb;"
    # chroot edit bash -c "rm -rf /usr/share/fonts/{opentype/FuraCode,truetype/FuraCode}; fc-cache -fv"
    # chroot edit bash -c 'checkppa --delete;'
    # cp /media/mofo/MEDIA_2/distros/zz_kernels/protonvpn-stable-release_1.0.3_all.deb edit/root/proton-release.deb
    # chroot edit bash -c 'apt update; apt install -y dnss; apt -y autoremove --purge stubby;'
    # chroot edit bash -c 'sed -i "15s/.*/DNS=127.0.0.1/" /etc/systemd/resolved.conf'
    # chroot edit bash -c 'sed -i "23s/.*/#DNSOverTLS=opportunistic/" /etc/systemd/resolved.conf'
    # chroot edit bash -c 'sed -i "2s/.*/nameserver 127.0.0.1/"  /etc/resolvconf/resolv.conf.d/original'
    # chroot edit bash -c 'sed -i "25s/.*/supersede domain-name-servers 127.0.0.1;/"  /etc/dhcp/dhclient.conf'
    # chroot edit bash -c "apt purge --autoremove ubuntu-advantage-tools ubuntu-wallpapers*"
    # chroot edit bash -c "python${pyversion} -m pip cache purge"
    #
}
get_apt_updates(){
    chroot edit bash -c "apt-key adv --refresh-keys --keyserver keyserver.ubuntu.com"
    chroot edit bash -c "apt update; apt update"
    # chroot edit bash -c "cd /root; nala update; nala update; nala upgrade -y; nala upgrade -y;"
    # [[ -n "${rmv_apt_pkg}" ]] && chroot edit bash -c "nala purge -y ${rmv_apt_pkg}"
    # [[ -n "${new_apt_pkg}" ]] && chroot edit bash -c "nala install -y ${new_apt_pkg}"
    # chroot edit bash -c "nala update; nala -y upgrade"
    chroot edit bash -c "apt -y upgrade --fix-missing; apt -y full-upgrade --fix-missing"
    chroot edit bash -c "apt -y upgrade --fix-missing; apt -y full-upgrade --fix-missing"
    chroot edit bash -c "apt -y --fix-broken install"
    # chroot edit bash -c "nala autopurge -y"
    # chroot edit bash -c "nala clean"
    chroot edit bash -c "apt -y autoremove --purge; apt clean"
}
get_other_updates(){
    chroot edit bash -c "cd /root; jupyter lab build"
    chroot edit bash -c "cd /root; npm install -g npm@latest"
    chroot edit bash -c "cd /root; npm install -g n; n lts; n prune"
    chroot edit bash -c "cd /root; npm cache clean -f"
    chroot edit bash -c "cd /root; npm update --save/--save-dev -g"
    chroot edit bash -c "cd /root; cpan-outdated -p | cpanm"
    chroot edit bash -c "cd /root; cpanm Neovim::Ext"
    chroot edit bash -c "cd /root; gem update"
    chroot edit bash -c "cd /root; gtk-update-icon-cache"
    chroot edit bash -c "cd /root; update-desktop-database"
    chroot edit bash -c "cd /root; fc-cache -fv"
    #chroot edit bash -c "cd /usr/local/src; ./getgits.sh"
}
kernel_upgrade(){
    # install microcode packages
    #cp /media/user/MEDIA_2/distros/zz_kernels/microcode/*.deb edit/root
    #chroot edit bash -c "cd /root; dpkg -i *.deb"
    #rm edit/root/*.deb
    [[ -z "${rmv_kernel}" ]] && return
    [[ -z "${new_kernel}" ]] && return
    cp ${header_deb} edit/root/kernel_header.deb
    cp ${image_deb} edit/root/kernel_image.deb
    cp ${libc_deb} edit/root/libc.deb
    chroot edit bash -c "cd /root; dpkg -i *.deb; exit"
    [[ -z "${older_kernel}" ]] || chroot edit apt purge --autoremove *-${older_kernel} -y
    [[ -z "${rmv_kernel}" ]] || chroot edit apt purge --autoremove *-${rmv_kernel} -y
    chroot edit bash -c "cd /root; build-bootfiles ${new_kernel}; exit"
    # copy, move, or clean up for Ubuntu
    [[ -d "extract-cd/casper"  ]] && mv edit/root/initrd extract-cd/casper/initrd
    [[ -d "extract-cd/casper"  ]] && mv edit/root/vmlinuz extract-cd/casper/vmlinuz
    # copy, move, or clean up for Ubuntu
    [[ -d "extract-cd/live"  ]] && [[ -f "edit/boot/initrd.img-${new_kernel}" ]] && rm extract-cd/live/initrd.img-${rmv_kernel}
    [[ -d "extract-cd/live"  ]] && [[ -f "edit/boot/vmlinuz-${new_kernel}" ]] && rm extract-cd/live/vmlinuz-${rmv_kernel}
    [[ -d "extract-cd/live"  ]] && cp edit/boot/initrd.img-${new_kernel} extract-cd/live/initrd.img-${new_kernel}
    [[ -d "extract-cd/live"  ]] && cp edit/boot/vmlinuz-${new_kernel} extract-cd/live/vmlinuz-${new_kernel}
    [[ -d "extract-cd/live"  ]] && mv edit/root/initrd extract-cd/live/initrd.img
    [[ -d "extract-cd/live"  ]] && mv edit/root/vmlinuz extract-cd/live/vmlinuz
    rm edit/root/*.deb
    sed -i "s|Linux Kernel ${rmv_kernel}<br>|Linux Kernel ${new_kernel}<br>|" *-latest-dev.log
    sed -i "s|Linux Kernel ${rmv_kernel}</li>|Linux Kernel ${new_kernel}</li>|" *-latest-dev.log
}
python_install_remove(){
    chroot edit bash -c 'pyclean /usr'
    chroot edit bash -c 'pyclean /opt'
    [[ -n "${new_python_pkg}" ]] && chroot edit bash -c "python${pyversion} -m pip install --upgrade --retries 10 --timeout 60 ${new_python_pkg}"
    [[ -n "${rmv_python_pkg}" ]] && chroot edit bash -c "python${pyversion} -m pip uninstall -y ${rmv_python_pkg}"
    chroot edit python${pyversion} -m pip check
}
python_update(){
    chroot edit bash -c 'pyclean /usr'
    chroot edit bash -c 'pyclean /opt'
    chroot edit bash -c "cd /root; update-python3-packages"
    chroot edit bash -c "cd /root; python${pyversion} -m pip check"
}
remove_snap(){
    chroot edit bash -c 'systemctl disable snapd.service'
    chroot edit bash -c 'systemctl disable snapd.socket'
    chroot edit bash -c 'systemctl disable snapd.seeded.service'
    chroot edit bash -c "for item in \"$(snap list)\";do snap remove $item; done"
    chroot edit bash -c 'rm -rf /var/cache/snapd/; apt autoremove --purge snapd'
}
super_clean(){
    chroot edit bash -c 'apt autoremove -y'
    chroot edit bash -c 'apt clean'
    chroot edit bash -c 'nala clean'
    chroot edit bash -c 'cd /root; npm cache clean -f'
    chroot edit bash -c 'yarn cache clean'
    list="apt.autoclean \
    apt.autoremove \
    apt.clean \
    apt.package_lists \
    firefox.cache \
    java.cache \
    system.cache \
    system.clipboard \
    system.custom \
    system.desktop_entry \
    system.localizations \
    system.recent_documents \
    system.rotated_logs \
    system.tmp \
    system.trash \
    thumbnails.cache \
    vim.history \
    vlc.memory_dump \
    vlc.mru
    x11.debug_logs"
    chroot edit bash -c "echo $list | xargs bleachbit --clean"
}
mounted_work(){
for project in $dirs; do
    # Python version
    [[ $project == "starling" ]] || pyversion="3.8"
    [[ $project == "starling" ]] && pyversion="3.10"
    export pyversion
	cd $project || return
	echo -e "\n...Starting work in $project ..."
    # Chroot into the filesystem
    mount --bind /run edit/run
    mount --bind /dev edit/dev
    mount --bind /dev/pts edit/dev/pts
    mount --bind /proc edit/proc
    mount --bind /sys edit/sys
    cp /etc/hosts edit/etc/hosts
    mkdir -p edit/run/systemd/resolve
    echo 'nameserver '${CHROOTDNS}'' > edit/run/systemd/resolve/resolv.conf
    echo 'nameserver '${CHROOTDNS}'' > edit/run/systemd/resolve/stub-resolv.conf
    wait
    echo -e "\nChrooting...\n"
    # execute chroot commands below here
    chroot edit bash -c "export LANG=C.UTF-8; export LC_ALL=C.UTF-8;"
    $COMMAND
    # clean up before unmounting
    chroot edit bash -c "vers=(7 8 9 10 11); for ver in ${vers[@]};do python3.${ver} -m pip cache purge; done"
    chroot edit bash -c "nala clean; apt clean; pyclean /usr/lib; pyclean /usr/local/lib"
    # Unmount after executing the chroot commands
    umount edit/sys
    umount edit/proc || umount -lf edit/proc
    umount edit/dev/pts
    umount edit/dev
    umount edit/run
    # clean up after unmounting
    rm -f edit/etc/hosts
    rm -rf edit/root/.[^.]*
    rm -rf edit/run/systemd/resolve/.[^.]*
    rm -rf edit/tmp/.[^.]*
    rm -rf edit/var/cache/apt/.[^.]*
    rm -rf edit/var/cache/fontconfig/.[^.]*
    rm -rf edit/var/cache/man/.[^.]*
    rm -rf edit/var/lib/apt/lists/.[^.]*
    rm -rf edit/etc/apt/*.save
    rm -rf edit/etc/apt/sources.list.d/*.save
    wait
	echo -e "\n...Finished work in $project ..."
    cd ..
done
}
OPTIONS="Discrete Commands
Apt Updates
Python Install and Remove
Python Update
Kernel Upgrade
Other Updates
Super Clean
Pre-Release (Apt,Other, and Clean)
Remove Snap"
# Select the desired action
CHOICE=$(echo -e "$OPTIONS" | fzf --layout=reverse --header=Select: )
clear
[[ -z "$CHOICE" ]] && echo "No selection made, exiting..." && exit 0
case "$CHOICE" in
    "Discrete Commands")
        COMMAND="discrete_commands"
        mounted_work
        ;;
    "Apt Updates")
        COMMAND="get_apt_updates"
        mounted_work
        ;;
    "Python Install and Remove")
        COMMAND="python_install_remove"
        mounted_work
        ;;
    "Python Update")
        COMMAND="python_update"
        mounted_work
        ;;
    "Kernel Upgrade")
        COMMAND="kernel_upgrade"
        mounted_work
        ;;
    "Other Updates")
        COMMAND="get_other_updates"
        mounted_work
        ;;
    "Super Clean")
        COMMAND="super_clean"
        mounted_work
        ;;
    "Pre-Release (Apt,Other, and Clean)")
        COMMAND="get_apt_updates
        python_update
        get_other_updates
        super_clean";
        mounted_work
        ;;
    "Remove Snap")
        COMMAND="remove_snap";
        mounted_work
        ;;
esac
echo "End of work in all projects."
