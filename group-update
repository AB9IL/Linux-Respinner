#!/bin/bash
# Place this script one level above the directories containing the distro files.

# exit if not root
[[ $EUID -ne 0 ]] && echo "You must be root to run this script." && exit
# define the non-root user
export username="$(logname)"

# Partition holding distro files
export partition="MEDIA_2"

# Script working directory (one level above project directories)
export WKDIR="$(readlink -f "$(dirname "$0")")"

# name of the projects' root file system directories
export RFSCONTENTS="edit"

# destination directory for booting finished iso file
export DESTINATION="/isodevice/isofiles"

# Go into each project and update packages
# list of directories holding linux projects
#export dirs='troutlinux'
#export dirs='troutlinux grunionlinux carplinux salmonlinux crayfishlinux'
#export dirs='troutlinux grunionlinux'
export dirs='troutlinux crayfishlinux'

# apt packages to install and remove
new_apt_pkg=''
rmv_apt_pkg=''
# Python packages to install and remove
new_python_pkg=''
rmv_python_pkg=''
# Kernels
kernel_path="$WKDIR/zz_kernels"
older_kernel=''
rmv_kernel='6.1.28-rt10-x64v3-xanmod1'
new_kernel='6.1.38-rt12-x64v4-xanmod1'
header_deb="${kernel_path}/linux-headers-${new_kernel}.deb"
image_deb="${kernel_path}/linux-image-${new_kernel}.deb"
libc_deb="${kernel_path}/linux-libc-dev_${new_kernel}.deb"
# DNS
CHROOTDNS='9.9.9.9' # DNS to use during chroot operation

discrete_commands(){
    printf "\nHello World\n"
    # cp $WKDIR/zz_kernels/scripts/sdrpp_ubuntu_focal_amd64.deb ${RFSCONTENTS}/root
    # chroot ${RFSCONTENTS} bash -c "cd /root; dpkg -i sdrpp_ubuntu_focal_amd64.deb; rm sdrpp_ubuntu_focal_amd64.deb;"
    # chroot ${RFSCONTENTS} bash -c "rm -rf /usr/share/fonts/{opentype/FuraCode,truetype/FuraCode}; fc-cache -fv"
    # chroot ${RFSCONTENTS} bash -c 'checkppa --delete;'
    # cp $WKDIR/zz_kernels/protonvpn-stable-release_1.0.3_all.deb ${RFSCONTENTS}/root/proton-release.deb
    # chroot ${RFSCONTENTS} bash -c 'apt update; apt install -y dnss; apt -y autoremove --purge stubby;'
    # chroot ${RFSCONTENTS} bash -c 'apt update; apt install -y htop;'
    # chroot ${RFSCONTENTS} bash -c 'sed -i "15s/.*/DNS=127.0.0.1/" /etc/systemd/resolved.conf'
    # chroot ${RFSCONTENTS} bash -c 'sed -i "23s/.*/#DNSOverTLS=opportunistic/" /etc/systemd/resolved.conf'
    # chroot ${RFSCONTENTS} bash -c 'sed -i "2s/.*/nameserver 127.0.0.1/"  /etc/resolvconf/resolv.conf.d/original'
    # chroot ${RFSCONTENTS} bash -c 'sed -i "25s/.*/supersede domain-name-servers 127.0.0.1;/"  /etc/dhcp/dhclient.conf'
    # chroot ${RFSCONTENTS} bash -c "apt purge --autoremove ubuntu-advantage-tools ubuntu-wallpapers*"
    # chroot ${RFSCONTENTS} bash -c "python${pyversion} -m pip cache purge"
    # freshen node and perl
    # chroot ${RFSCONTENTS} bash -c "cd /root; npm -g uninstall bash-language-server corepack eslint_d neovim prettier readability-cli tslab typescript typescript-language-server vim-language-server vscode-html-languageserver-bin"
    # chroot ${RFSCONTENTS} bash -c "cd /root; npm -g install bash-language-server corepack eslint_d neovim prettier readability-cli typescript typescript-language-server vscode-html-languageserver-bin"
    # chroot ${RFSCONTENTS} bash -c "npm dedupe"
    # chroot ${RFSCONTENTS} bash -c "cpanm App::cpanoutdated && cpan-outdated -p | cpanm"
    #
    # chroot ${RFSCONTENTS} bash -c "nala update; nala update; nala install -y obsession && nala clean && apt clean && python${pyversion} -m pip cache purge"
    #
    # chroot ${RFSCONTENTS} bash -c "systemctl enable startup-items.service"
    #
    # sed -i 's| Enrer | Enter |' ${RFSCONTENTS}/usr/local/sbin/menu-wireguard
    # chroot ${RFSCONTENTS} bash -c "cd /root; apt -y purge --autoremove xserver-xorg-video-nouveau;"
    #
    # rsync -avhc /usr/share/fonts/truetype/AAntiCorona/ ${RFSCONTENTS}/usr/share/fonts/truetype/AAntiCorona/
    # chroot ${RFSCONTENTS} bash -c "cd /root; fc-cache -fv;"
    #
}
get_apt_updates(){
    # chroot ${RFSCONTENTS} bash -c "apt-key adv --refresh-keys --keyserver keyserver.ubuntu.com"
    chroot ${RFSCONTENTS} bash -c "apt update; apt update"
    # chroot ${RFSCONTENTS} bash -c "cd /root; nala update; nala update; nala upgrade -y; nala upgrade -y;"
    # [[ -n "${rmv_apt_pkg}" ]] && chroot ${RFSCONTENTS} bash -c "nala purge -y ${rmv_apt_pkg}"
    # [[ -n "${new_apt_pkg}" ]] && chroot ${RFSCONTENTS} bash -c "nala install -y ${new_apt_pkg}"
    # chroot ${RFSCONTENTS} bash -c "nala update; nala -y upgrade"
    chroot ${RFSCONTENTS} bash -c "apt -y upgrade; apt -y upgrade --fix-missing"
    chroot ${RFSCONTENTS} bash -c "apt -y --fix-broken install"
    # chroot ${RFSCONTENTS} bash -c "nala autopurge -y"
    # chroot ${RFSCONTENTS} bash -c "nala clean"
    chroot ${RFSCONTENTS} bash -c "apt -y autoremove --purge; apt clean"
}
get_other_updates(){
    chroot ${RFSCONTENTS} bash -c "cd /root; jupyter lab build"
    chroot ${RFSCONTENTS} bash -c "cd /root; npm install -g npm@latest"
    chroot ${RFSCONTENTS} bash -c "cd /root; npm install -g n; n lts; n prune"
    chroot ${RFSCONTENTS} bash -c "cd /root; npm cache clean -f"
    chroot ${RFSCONTENTS} bash -c "cd /root; npm update --save/--save-dev -g"
    chroot ${RFSCONTENTS} bash -c "cd /root; cpan-outdated -p | cpanm"
    chroot ${RFSCONTENTS} bash -c "cd /root; cpanm Neovim::Ext"
    chroot ${RFSCONTENTS} bash -c "cd /root; gem update"
    chroot ${RFSCONTENTS} bash -c "cd /root; gtk-update-icon-cache"
    chroot ${RFSCONTENTS} bash -c "cd /root; update-desktop-database"
    chroot ${RFSCONTENTS} bash -c "cd /root; fc-cache -fv"
    #chroot ${RFSCONTENTS} bash -c "cd /usr/local/src; ./getgits.sh"
}
kernel_upgrade(){
    # install microcode packages
    #cp $WKDIR/zz_kernels/microcode/*.deb ${RFSCONTENTS}/root
    #chroot ${RFSCONTENTS} bash -c "cd /root; dpkg -i *.deb"
    #rm ${RFSCONTENTS}/root/*.deb
    [[ -z "${rmv_kernel}" ]] && return
    [[ -z "${new_kernel}" ]] && return
    cp ${header_deb} ${RFSCONTENTS}/root/kernel_header.deb
    cp ${image_deb} ${RFSCONTENTS}/root/kernel_image.deb
    cp ${libc_deb} ${RFSCONTENTS}/root/libc.deb
    chroot ${RFSCONTENTS} bash -c "cd /root; dpkg -i *.deb; exit"
    [[ -z "${older_kernel}" ]] || chroot ${RFSCONTENTS} apt purge --autoremove *-${older_kernel} -y
    [[ -z "${rmv_kernel}" ]] || chroot ${RFSCONTENTS} apt purge --autoremove *-${rmv_kernel} -y
    chroot ${RFSCONTENTS} bash -c "cd /root; build-bootfiles ${new_kernel}; exit"
    # copy, move, or clean up for Ubuntu
    [[ -d "extract-cd/casper"  ]] && mv ${RFSCONTENTS}/root/initrd extract-cd/casper/initrd
    [[ -d "extract-cd/casper"  ]] && mv ${RFSCONTENTS}/root/vmlinuz extract-cd/casper/vmlinuz
    # copy, move, or clean up for Ubuntu
    [[ -d "extract-cd/live"  ]] && [[ -f "${RFSCONTENTS}/boot/initrd.img-${new_kernel}" ]] && rm extract-cd/live/initrd.img-${rmv_kernel}
    [[ -d "extract-cd/live"  ]] && [[ -f "${RFSCONTENTS}/boot/vmlinuz-${new_kernel}" ]] && rm extract-cd/live/vmlinuz-${rmv_kernel}
    [[ -d "extract-cd/live"  ]] && cp ${RFSCONTENTS}/boot/initrd.img-${new_kernel} extract-cd/live/initrd.img-${new_kernel}
    [[ -d "extract-cd/live"  ]] && cp ${RFSCONTENTS}/boot/vmlinuz-${new_kernel} extract-cd/live/vmlinuz-${new_kernel}
    [[ -d "extract-cd/live"  ]] && mv ${RFSCONTENTS}/root/initrd extract-cd/live/initrd.img
    [[ -d "extract-cd/live"  ]] && mv ${RFSCONTENTS}/root/vmlinuz extract-cd/live/vmlinuz
    rm ${RFSCONTENTS}/root/*.deb
    sed -i "s|Linux Kernel ${rmv_kernel}<br>|Linux Kernel ${new_kernel}<br>|" *-latest-dev.log
    sed -i "s|Linux Kernel ${rmv_kernel}</li>|Linux Kernel ${new_kernel}</li>|" *-latest-dev.log
}
python_install_remove(){
    chroot ${RFSCONTENTS} bash -c 'pyclean /usr'
    chroot ${RFSCONTENTS} bash -c 'pyclean /opt'
    [[ -n "${new_python_pkg}" ]] && chroot ${RFSCONTENTS} bash -c "python${pyversion} -m pip install --upgrade --retries 10 --timeout 60 ${new_python_pkg}"
    [[ -n "${rmv_python_pkg}" ]] && chroot ${RFSCONTENTS} bash -c "python${pyversion} -m pip uninstall -y ${rmv_python_pkg}"
    chroot ${RFSCONTENTS} python${pyversion} -m pip check
}
python_update(){
    chroot ${RFSCONTENTS} bash -c 'pyclean /usr'
    chroot ${RFSCONTENTS} bash -c 'pyclean /opt'
    chroot ${RFSCONTENTS} bash -c "cd /root; update-python3-packages"
    chroot ${RFSCONTENTS} bash -c "cd /root; python${pyversion} -m pip check"
}
remove_snap(){
    chroot ${RFSCONTENTS} bash -c 'systemctl disable snapd.service'
    chroot ${RFSCONTENTS} bash -c 'systemctl disable snapd.socket'
    chroot ${RFSCONTENTS} bash -c 'systemctl disable snapd.seeded.service'
    chroot ${RFSCONTENTS} bash -c "for item in \"$(snap list)\";do snap remove $item; done"
    chroot ${RFSCONTENTS} bash -c 'rm -rf /var/cache/snapd/; apt autoremove --purge snapd'
}
super_clean(){
    chroot ${RFSCONTENTS} bash -c 'apt autoremove -y'
    chroot ${RFSCONTENTS} bash -c 'apt clean'
    chroot ${RFSCONTENTS} bash -c 'nala clean'
    chroot ${RFSCONTENTS} bash -c 'cd /root; npm cache clean -f'
    chroot ${RFSCONTENTS} bash -c 'yarn cache clean'
    list="apt.autoclean \
    apt.autoremove \
    apt.clean \
    apt.package_lists \
    firefox.cache \
    java.cache \
    system.cache \
    system.clipboard \
    system.custom \
    system.desktop_entry \
    system.localizations \
    system.recent_documents \
    system.rotated_logs \
    system.tmp \
    system.trash \
    thumbnails.cache \
    vim.history \
    vlc.memory_dump \
    vlc.mru
    x11.debug_logs"
    chroot ${RFSCONTENTS} bash -c "echo $list | xargs bleachbit --clean"
}
mounted_work(){
for project in $dirs; do
    # Python version
    [[ $project == "starling" ]] || pyversion="3.8"
    [[ $project == "starling" ]] && pyversion="3.10"
    [[ $project == "debian" ]] && pyversion="3.11"
    export pyversion
	cd ${WKDIR}/${project} || return
	echo -e "\n...Starting work in $project ..."
    # Chroot into the filesystem
    mount --bind /run ./${RFSCONTENTS}/run
    mount --bind /dev ./${RFSCONTENTS}/dev
    mount --bind /dev/pts ./${RFSCONTENTS}/dev/pts
    mount --bind /proc ./${RFSCONTENTS}/proc
    mount --bind /sys ./${RFSCONTENTS}/sys
    cp /etc/hosts ${RFSCONTENTS}/etc/hosts
    mkdir -p ${RFSCONTENTS}/run/systemd/resolve
    echo 'nameserver '${CHROOTDNS}'' > ${RFSCONTENTS}/run/systemd/resolve/resolv.conf
    echo 'nameserver '${CHROOTDNS}'' > ${RFSCONTENTS}/run/systemd/resolve/stub-resolv.conf
    wait
    echo -e "\nChrooting...\n"
    # execute chroot commands below here
    chroot ${RFSCONTENTS} bash -c "export LANG=C.UTF-8; export LC_ALL=C.UTF-8;"
    $COMMAND
    # clean up before unmounting
    chroot ${RFSCONTENTS} bash -c "vers=(7 8 9 10 11); for ver in ${vers[@]};do python3.${ver} -m pip cache purge; done"
    chroot ${RFSCONTENTS} bash -c "nala clean; apt clean"
    #chroot ${RFSCONTENTS} bash -c "pyclean /usr/lib; pyclean /usr/local/lib"
    # Unmount after executing the chroot commands
    umount ./${RFSCONTENTS}/sys
    umount ./${RFSCONTENTS}/proc || umount -lf ${RFSCONTENTS}/proc
    umount ./${RFSCONTENTS}/dev/pts
    umount ./${RFSCONTENTS}/dev
    umount ./${RFSCONTENTS}/run
    # clean up after unmounting
    rm -f  ./${RFSCONTENTS}/etc/hosts
    rm -rf ./${RFSCONTENTS}/root/.[^.]*
    rm -rf ./${RFSCONTENTS}/run/systemd/resolve/.[^.]*
    rm -rf ./${RFSCONTENTS}/tmp/.[^.]*
    rm -rf ./${RFSCONTENTS}/var/cache/apt/.[^.]*
    rm -rf ./${RFSCONTENTS}/var/cache/fontconfig/.[^.]*
    rm -rf ./${RFSCONTENTS}/var/cache/man/.[^.]*
    rm -rf ./${RFSCONTENTS}/var/lib/apt/lists/.[^.]*
    rm -rf ./${RFSCONTENTS}/etc/apt/*.save
    rm -rf ./${RFSCONTENTS}/etc/apt/sources.list.d/*.save
    wait
	echo -e "\n...Finished work in $project ..."
    cd ${WKDIR}
done
}
construct(){
	(cd ${WKDIR}/${1} || return
	echo -e "\n\n   Starting work in ${1}   "
    [[ -f "${1}-latest.iso" ]] && \
    echo -e "\n\nMove ${1}-latest.iso to ${1}-latest.stable.iso\n" && \
    mv ${1}-latest.iso ${1}-latest.stable.iso
	./multifunction.sh makedisk
	echo -e "\n\n...Finished work in ${1}...\n"
    )
}

make_copy(){
    ([[ -f ${WKDIR}/${1}/${1}-latest.iso ]] || exit 1
    # kill the loop if error
    trap 'echo "Exited!"; exit;' INT TERM
    MAX_RETRIES=50
    x=0
    # Set initial return value to failure
    false
    while [[ $? -ne 0 ]] && [[ $x -lt $MAX_RETRIES ]]; do
        ((x++))
        echo -e "\n...Copying $project-latest.iso --isofiles-- Pass $x...\n"
		rsync -avhc --inplace --no-whole-file --info=progress2 \
		${WKDIR}/${1}/${1}-latest.iso \
        ${DESTINATION}/${1}-latest.iso;
        #/media/$username/$destination/isofiles/$project-latest.iso;
	sha256sum	${WKDIR}/${1}/${1}-latest.iso \
        ${DESTINATION}/${1}-latest.iso;
    done
    [[ $x -eq $MAX_RETRIES ]] &&  echo -e "\n\nRetry limit reached\n\n"
    )
}

build(){
    # builds iso images and copies them to the boot partition
    clear
    for project in $dirs
    do
        export project
	    construct "$project" #&
    done
    clear
    echo -e "\nn...Builds complete.  Now writing to the boot drive and backup...\n\n"

    for project in $dirs
    do
    export project
    make_copy "$project" #&
    done

    echo -e "\n\n   File copy tasks completed.  Enjoy your new Linux!  \n\n"
}

OPTIONS="Discrete Commands
Apt Updates
Python Install and Remove
Python Update
Kernel Upgrade
Other Updates
Super Clean
Pre-Release (Apt,Other, and Clean)
Remove Snap
Build ISO Images"
# Select the desired action
CHOICE=$(echo -e "$OPTIONS" | fzf --layout=reverse --header=Select: )
clear
[[ -z "$CHOICE" ]] && echo "No selection made, exiting..." && exit 0
case "$CHOICE" in
    "Discrete Commands")
        COMMAND="discrete_commands"
        mounted_work
        ;;
    "Apt Updates")
        COMMAND="get_apt_updates"
        mounted_work
        ;;
    "Python Install and Remove")
        COMMAND="python_install_remove"
        mounted_work
        ;;
    "Python Update")
        COMMAND="python_update"
        mounted_work
        ;;
    "Kernel Upgrade")
        COMMAND="kernel_upgrade"
        mounted_work
        ;;
    "Other Updates")
        COMMAND="get_other_updates"
        mounted_work
        ;;
    "Super Clean")
        COMMAND="super_clean"
        mounted_work
        ;;
    "Pre-Release (Apt,Other, and Clean)")
        COMMAND="get_apt_updates
        python_update
        get_other_updates
        super_clean";
        mounted_work
        ;;
    "Remove Snap")
        COMMAND="remove_snap";
        mounted_work
        ;;
    "Build ISO Images")
        build
        ;;
esac
echo "End of work in all projects."
